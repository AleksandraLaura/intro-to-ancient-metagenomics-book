{
  "hash": "e8ec6de638a7e9fbd1fbba2f05d6aa4d",
  "result": {
    "markdown": "---\ntitle: Introduction to Python and Pandas\nauthor: Robin Warner, Kevin Nota, and Maxime Borry\n---\n\n:::  {.callout-note} \nThis session is typically ran held in parallel to the Introduction to R and Tidyverse. Participants of the summer schools chose which to attend based on their prior experience. We recommend the [introduction to R session](r-tidyverse.qmd) if you have no experience with neither R nor Python.\n:::\n\n::: callout-tip\nFor this chapter's exercises, if not already performed, you will need to create the [conda environment](before-you-start.qmd#creating-a-conda-environment) from the `yml` file in the following [link](https://github.com/SPAAM-community/intro-to-ancient-metagenomics-book/raw/main/assets/envs/python-pandas.yml) (use `wget`, or right click and save as to download), and once created, activate the environment with:\n\n``` bash\nconda activate python-pandas\n```\n\nTo download the data for this chapter, please download following archive with, extract the tar, and change into the directory.\n\nFor example\n\n```bash\nwget -O python-pandas.tar.gz https://www.dropbox.com/scl/fi/ogyfda9qzoz7cl8wpoyth/python-pandas.tar.gz?rlkey=mbbx0e4p4us4m1fo4kzkzy9e6&dl=0 -P /<PATH>/<TO>/<SOMEWHERE_TO_STORE>/\ntar -xzf python-pandas.tar.gz\ncd python-pandas\n```\n:::\n\n## Introduction\n\nOver the last few years, Python has gained popularity thanks to the numerous libraries (packages with pre-written functions) in the field of machine learning, statistical data analysis, and bioinformatics. While a few years ago, it was often necessary to go to R for performing routine data manipulation and analysis tasks, nowadays Python has a vast ecosystem of libraries. Libraries exist for many different file formats that you might encounter in metagenomics, such as fasta, fastq, sam, bam, etc.\n\nThis tutorial/walkthrough will provide a short introduction to the most popular libraries for data analysis [pandas](https://pandas.pydata.org/). This library has functions for reading and manipulating tabular data similar to the `data.frame()` in R together with some basic data plotting codes.\n\nThe aim of this walkthrough is to first: get familiar with the Python code syntax and use Jupiter Notebook for executing codes and secondly get a kickstart to utilising the endless possibilities of data analysis in Python that can be applied to your data.  \n\n## Working in a jupyter environment\n\nThis tutorial run-through is using a [Jupyter Notebook](https://jupyter.org) for writing & executing Python code and for annotating.\n\nJupyter notebooks are convenient and have two types of cells: **Markdown** and **Code**. The **markup cell** syntax is very similar to **R markdown**. The markdown cells are used for annotating, which is important for sharing code with collaborators, reproducibility, and documentation.\n\nTo load `jupyter`\n\nA few examples are shown below. For a full list of possible syntax [click here](https://www.ibm.com/docs/en/watson-studio-local/1.2.3?topic=notebooks-markdown-jupyter-cheatsheet) for a Jupyter Notebook cheat-sheet.  \n\nlist of **markdown cell** examples:\n\n::: {.callout-note}\nIn many cases, there are multiple possible syntaxes which give the same result. We present only one way in this run-through.\n:::\n\nText\n\n- `**bold**` : **bold**\n- `*italics*` : *italics*\n\nCode\n\n- \\`inline code\\` : `inline code`\n \n LaTeX maths\n\n- `$ x = \\frac{\\pi}{42} $` : $$ x = \\frac{\\pi}{42} $$\n\nurl links\n\n- `[link](https://www.python.org/)`[link](https://www.python.org/)\n\nImages\n\n- `![](https://www.spaam-community.org/assets/media/SPAAM-Logo-Full-Colour_ShortName.svg)` ![](https://www.spaam-community.org/assets/media/SPAAM-Logo-Full-Colour_ShortName.svg)\n\n\\\nThe **code cells** can interpret many different coding languages including Python and Bash. The syntax of the code cells is the same as the syntax of the coding languages, in our case python. \n\nBelow are some examples of Python **code cells** with some useful basic python functions:\n\n::: {.callout-tip}\n## Python function\n`print()` is a python function for printing lines in the terminal\n`print() == echo ` in bash\n:::\n\n```python\nprint(\"Hello World from Python!\")\n```\n*out -* `Hello World from Python!`\n\nBut it can also, for example, run bash commands by adding a *!* at the start of the line.\n\n```python\n! echo \"Hello World from bash!\"\n```\n*out -* `Hello World from bash!`\n\nStings or numbers can be stored as a variable by using the *=* sign\n\n```python\ni = 0\n```\nOnes a variable is set in one **code cell** they are stored and can be accessed in other downstream **code cells**.\n\n```python\nprint(i)\n```\n\nYou can also print multiple things together in one `print` statement such as a number and a string:\n\n```python\nprint(\"The number is\", i, \"Wow!\")\n```\n*out -* `The number is 0 Wow!`\n\n## Pandas\n### Getting started\nPandas is a Python library used for data manipulation and analysis.\n\nWe can import the library like this:\n\n```python\nimport pandas as pd\n```\n\n::: {.callout-note}\nWe set \"pandas\" to the alias \"pd\" because we are lazy and don't want to write the full word too many times.\n:::\n\nNow, we can print the current version:\n\n```python\npd.__version__\n```\n*out -* `'2.0.1'`\n\n### Pandas data structures\nThe primary data structures in Pandas are `Series` and `DataFrame`.\n\nA `DataFrame` is a table with **columns** and **rows**. \n\nEach **column** has a *column name* and each **row** has an *index*.\n\n\n![](assets/images/chapters/python-pandas/01_table_dataframe.svg)\n\nA single row or column (1 dimensional data) is a `Series`.\n\n![](assets/images/chapters/python-pandas/01_table_series.svg)\n\n::: {.callout-note}\nFor a more in detail pandas getting started tutorial [click here](https://pandas.pydata.org/docs/getting_started/index.html#)\n:::\n\n## Reading data with Pandas\n\nPandas can read in **csv** (comma separated values) files, which are tables in text format.\n\nIt's called **c**sv because each value is separated from the others via a comma, like this:\n\n\n```{text}\nA,B\n5,6\n8,4\n```\n\n\n*out -* \n<table border=\"1\" class=\"dataframe\" style=\"width:10%;margin-left:auto;margin-right:auto;dataframe\">\n  <tr>\n    <th></th>\n    <th>A</th>\n    <th>B</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>2</td>\n    <td>3</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>3</td>\n    <td>4</td>\n  </tr>\n</table>\n\nAnother common tabular separator are **tsv**, where each value is separated by a **tab** `\\t`\n\n\n```{text}\nA\\tB\n5\\t6\n8\\t4\n```\n\n\n>Our dataset `\"all_data.tsv\"` is tab separated, which Pandas can handle using the `sep` argument.\n\n::: {.callout-tip}\n## Pandas function\n`pd.read_csv()` is the pandas function to read in tabular tables. The `sep=` can be specified argument, `sep=,` is the default.\n:::\n\n```python\ndf = pd.read_csv(\"all_data.tsv\", sep=\"\\t\")\ndf\n```\n\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>5524</td>\\n      <td>1957</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>58138.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>635</td>\\n      <td>88</td>\\n      <td>546</td>\\n      <td>172</td>\\n      <td>88</td>\\n      <td>88</td>\\n      <td>8</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>4141</td>\\n      <td>1965</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>71613.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>426</td>\\n      <td>49</td>\\n      <td>127</td>\\n      <td>111</td>\\n      <td>21</td>\\n      <td>42</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>6182</td>\\n      <td>1984</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>26646.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>11</td>\\n      <td>4</td>\\n      <td>20</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>7446</td>\\n      <td>1967</td>\\n      <td>Master</td>\\n      <td>Together</td>\\n      <td>62513.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>520</td>\\n      <td>42</td>\\n      <td>98</td>\\n      <td>0</td>\\n      <td>42</td>\\n      <td>14</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>10</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>1749</th>\\n      <td>9432</td>\\n      <td>1977</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>666666.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>9</td>\\n      <td>14</td>\\n      <td>18</td>\\n      <td>8</td>\\n      <td>1</td>\\n      <td>12</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>3</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1750</th>\\n      <td>8372</td>\\n      <td>1974</td>\\n      <td>Graduation</td>\\n      <td>Married</td>\\n      <td>34421.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>3</td>\\n      <td>7</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>9</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>2</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1751</th>\\n      <td>10870</td>\\n      <td>1967</td>\\n      <td>Graduation</td>\\n      <td>Married</td>\\n      <td>61223.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>709</td>\\n      <td>43</td>\\n      <td>182</td>\\n      <td>42</td>\\n      <td>118</td>\\n      <td>247</td>\\n      <td>9</td>\\n      <td>3</td>\\n      <td>4</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1752</th>\\n      <td>7270</td>\\n      <td>1981</td>\\n      <td>Graduation</td>\\n      <td>Divorced</td>\\n      <td>56981.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>908</td>\\n      <td>48</td>\\n      <td>217</td>\\n      <td>32</td>\\n      <td>12</td>\\n      <td>24</td>\\n      <td>2</td>\\n      <td>3</td>\\n      <td>13</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1753</th>\\n      <td>8235</td>\\n      <td>1956</td>\\n      <td>Master</td>\\n      <td>Together</td>\\n      <td>69245.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>428</td>\\n      <td>30</td>\\n      <td>214</td>\\n      <td>80</td>\\n      <td>30</td>\\n      <td>61</td>\\n      <td>6</td>\\n      <td>5</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>1754 rows × 20 columns</p>\n\n::: {.callout-tip}\nWhen you are unsure what arguments a function can take, it is possible to get a *help documentation* using `help(pd.read_csv)`\n:::\n\n## Data exploration\n\nThe data is from a customer personality analysis of a company trying to better understand how to modify their product catalogue. Here is the [link to the original source](https://www.kaggle.com/datasets/imakash3011/customer-personality-analysis) for more information. \n\n### Columns\n\nThe command below prints all the column names.\n\n```python\ndf.columns\n```\n```\nIndex(['ID', 'Year_Birth', 'Education', 'Marital_Status', 'Income', 'Kidhome',\n       'Teenhome', 'MntWines', 'MntFruits', 'MntMeatProducts',\n       'MntFishProducts', 'MntSweetProducts', 'MntGoldProds',\n       'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases',\n       'NumWebVisitsMonth', 'Complain', 'Z_CostContact', 'Z_Revenue'],\n      dtype='object')\n```\n\nWe can also list their respective data types.\n\n- `int64` are integers\n- `float64` are floating point numbers, also called `double` in other languages\n- `object` are Python objects, which are strings in this case\n\n```python\ndf.dtypes\n```\n```\nID                       int64\nYear_Birth               int64\nEducation               object\nMarital_Status          object\nIncome                 float64\nKidhome                  int64\nTeenhome                 int64\nMntWines                 int64\nMntFruits                int64\nMntMeatProducts          int64\nMntFishProducts          int64\nMntSweetProducts         int64\nMntGoldProds             int64\nNumWebPurchases          int64\nNumCatalogPurchases      int64\nNumStorePurchases        int64\nNumWebVisitsMonth        int64\nComplain                 int64\nZ_CostContact            int64\nZ_Revenue                int64\ndtype: object\n```\n### Inspecting the DataFrame\n\nWhat is the size of our `DataFrame`\n\n```python\ndf.shape\n```\n```\n(1754, 20)\n```\nIt has **1754** rows and **20** columns.\n\nLet's look at the first 5 rows:\n\n```python\ndf.head()\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>5524</td>\\n      <td>1957</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>58138.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>635</td>\\n      <td>88</td>\\n      <td>546</td>\\n      <td>172</td>\\n      <td>88</td>\\n      <td>88</td>\\n      <td>8</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>4141</td>\\n      <td>1965</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>71613.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>426</td>\\n      <td>49</td>\\n      <td>127</td>\\n      <td>111</td>\\n      <td>21</td>\\n      <td>42</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>6182</td>\\n      <td>1984</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>26646.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>11</td>\\n      <td>4</td>\\n      <td>20</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>7446</td>\\n      <td>1967</td>\\n      <td>Master</td>\\n      <td>Together</td>\\n      <td>62513.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>520</td>\\n      <td>42</td>\\n      <td>98</td>\\n      <td>0</td>\\n      <td>42</td>\\n      <td>14</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>10</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n  </tbody>\\n</table>\n\nWhat we can see it that, unlike **R**, **Python** and in extension **Pandas** is 0-indexed instead of 1-indexed.\n\n<details>\n  <summary markdown=\"span\">Question: Can you show how to do the same using bash?</summary>\n\n```python\n! head all_data.tsv\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>5524</td>\\n      <td>1957</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>58138.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>635</td>\\n      <td>88</td>\\n      <td>546</td>\\n      <td>172</td>\\n      <td>88</td>\\n      <td>88</td>\\n      <td>8</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>4141</td>\\n      <td>1965</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>71613.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>426</td>\\n      <td>49</td>\\n      <td>127</td>\\n      <td>111</td>\\n      <td>21</td>\\n      <td>42</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>6182</td>\\n      <td>1984</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>26646.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>11</td>\\n      <td>4</td>\\n      <td>20</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>7446</td>\\n      <td>1967</td>\\n      <td>Master</td>\\n      <td>Together</td>\\n      <td>62513.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>520</td>\\n      <td>42</td>\\n      <td>98</td>\\n      <td>0</td>\\n      <td>42</td>\\n      <td>14</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>10</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>5</th>\\n      <td>965</td>\\n      <td>1971</td>\\n      <td>Graduation</td>\\n      <td>Divorced</td>\\n      <td>55635.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>235</td>\\n      <td>65</td>\\n      <td>164</td>\\n      <td>50</td>\\n      <td>49</td>\\n      <td>27</td>\\n      <td>7</td>\\n      <td>3</td>\\n      <td>7</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>6</th>\\n      <td>1994</td>\\n      <td>1983</td>\\n      <td>Graduation</td>\\n      <td>Married</td>\\n      <td>NaN</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>5</td>\\n      <td>5</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>2</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>7</th>\\n      <td>387</td>\\n      <td>1976</td>\\n      <td>Basic</td>\\n      <td>Married</td>\\n      <td>7500.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>6</td>\\n      <td>16</td>\\n      <td>11</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>16</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>8</th>\\n      <td>2125</td>\\n      <td>1959</td>\\n      <td>Graduation</td>\\n      <td>Divorced</td>\\n      <td>63033.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>194</td>\\n      <td>61</td>\\n      <td>480</td>\\n      <td>225</td>\\n      <td>112</td>\\n      <td>30</td>\\n      <td>3</td>\\n      <td>4</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>9</th>\\n      <td>8180</td>\\n      <td>1952</td>\\n      <td>Master</td>\\n      <td>Divorced</td>\\n      <td>59354.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>233</td>\\n      <td>2</td>\\n      <td>53</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>14</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>5</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n  </tbody>\\n</table>\n\n</details>\n\n### Accessing rows and columns\n\nWe can access parts of the data in `DataFrames` in different ways.\n\nThe first method is sub-setting the rows using the index.\n\nThis will take only the second row and all columns, producing a `Series`:\n\n```python\ndf.loc[1, :]\n```\n```\nID                           2174\nYear_Birth                   1954\nEducation              Graduation\nMarital_Status             Single\nIncome                    46344.0\nKidhome                         1\nTeenhome                        1\nMntWines                       11\nMntFruits                       1\nMntMeatProducts                 6\nMntFishProducts                 2\nMntSweetProducts                1\nMntGoldProds                    6\nNumWebPurchases                 1\nNumCatalogPurchases             1\nNumStorePurchases               2\nNumWebVisitsMonth               5\nComplain                        0\nZ_CostContact                   3\nZ_Revenue                      11\nName: 1, dtype: object\n```\n\nAnd this will take the second and third row, producing another `DataFrame`:\n\n```python\ndf.loc[1:2, :]\n```\n\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>4141</td>\\n      <td>1965</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>71613.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>426</td>\\n      <td>49</td>\\n      <td>127</td>\\n      <td>111</td>\\n      <td>21</td>\\n      <td>42</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n  </tbody>\\n</table>\n\nIt's important to understand that almost all operations on `DataFrames` are not in-place, meaning that we don't modify the original object and would have to save the results to the same or a new variable to keep the changes.\n\nThis, for example will create a new `DataFrame` of only the \"Education\" and \"Marital_Status\" columns.\n\n```python\nnew_df = df.loc[:, [\"Education\", \"Marital_Status\"]]\nnew_df\n```\n'<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>Master</td>\\n      <td>Together</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>1749</th>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n    </tr>\\n    <tr>\\n      <th>1750</th>\\n      <td>Graduation</td>\\n      <td>Married</td>\\n    </tr>\\n    <tr>\\n      <th>1751</th>\\n      <td>Graduation</td>\\n      <td>Married</td>\\n    </tr>\\n    <tr>\\n      <th>1752</th>\\n      <td>Graduation</td>\\n      <td>Divorced</td>\\n    </tr>\\n    <tr>\\n      <th>1753</th>\\n      <td>Master</td>\\n      <td>Together</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>1754 rows × 2 columns</p>'\n\nSelecting only one column by name:\n\n```python\ndf[\"Year_Birth\"]\n```\n```\n0       1957\n1       1954\n2       1965\n3       1984\n4       1967\n        ... \n1749    1977\n1750    1974\n1751    1967\n1752    1981\n1753    1956\n```\n\nWe can also remove columns from the `DataFrame`.\n\nIn this case, we want to remove the columns `Z_CostContact` and `Z_Revenue` and keep those changes.\n\n```python\ndf = df.drop(\"Z_CostContact\", axis=1)\ndf = df.drop(\"Z_Revenue\", axis=1)\n```\n\n### Conditional subsetting\n\nWe can more specifically look at subsets of the data we might be interested in.\n\nThis subsetting is a bit weird in the syntax at first but hopefully makes more sense when we go through it step by step.\n\nWe can, for example, test each string in the column `Education` if it is equal to `PhD`:\n\n\n```python\neducation_is_grad = (df[\"Education\"] == \"Graduation\")\neducation_is_grad\n```\n```\n0        True\n1        True\n2        True\n3        True\n4       False\n        ...  \n1749     True\n1750     True\n1751     True\n1752     True\n1753    False\nName: Education, Length: 1754, dtype: bool\n```\n\nWe can also check for multiple conditions at once:\n\n```python\ntwo_at_once = (df[\"Education\"] == \"Graduation\") & (df[\"Marital_Status\"] == \"Single\")\ntwo_at_once\n```\n```\n0        True\n1        True\n2       False\n3       False\n4       False\n        ...  \n1749    False\n1750    False\n1751    False\n1752    False\n1753    False\nLength: 1754, dtype: bool\n```\n\nThis will create a `Series` of booleans, which can then be used to subset the data to rows where the condition(s) are **True**:\n\n```python\ndf[two_at_once]\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>5524</td>\\n      <td>1957</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>58138.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>635</td>\\n      <td>88</td>\\n      <td>546</td>\\n      <td>172</td>\\n      <td>88</td>\\n      <td>88</td>\\n      <td>8</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>18</th>\\n      <td>7892</td>\\n      <td>1969</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>18589.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>25</td>\\n      <td>15</td>\\n      <td>12</td>\\n      <td>13</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>3</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>20</th>\\n      <td>5255</td>\\n      <td>1986</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>NaN</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>5</td>\\n      <td>1</td>\\n      <td>3</td>\\n      <td>3</td>\\n      <td>263</td>\\n      <td>362</td>\\n      <td>27</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>33</th>\\n      <td>1371</td>\\n      <td>1976</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>79941.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>123</td>\\n      <td>164</td>\\n      <td>266</td>\\n      <td>227</td>\\n      <td>30</td>\\n      <td>174</td>\\n      <td>2</td>\\n      <td>4</td>\\n      <td>9</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>1720</th>\\n      <td>10968</td>\\n      <td>1969</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>57731.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>266</td>\\n      <td>21</td>\\n      <td>300</td>\\n      <td>65</td>\\n      <td>8</td>\\n      <td>44</td>\\n      <td>8</td>\\n      <td>8</td>\\n      <td>6</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1723</th>\\n      <td>5959</td>\\n      <td>1968</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>35893.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>158</td>\\n      <td>0</td>\\n      <td>23</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>18</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>5</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1743</th>\\n      <td>4201</td>\\n      <td>1962</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>57967.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>229</td>\\n      <td>7</td>\\n      <td>137</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>91</td>\\n      <td>4</td>\\n      <td>2</td>\\n      <td>8</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1746</th>\\n      <td>7004</td>\\n      <td>1984</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>11012.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>24</td>\\n      <td>3</td>\\n      <td>26</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>23</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>9</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1748</th>\\n      <td>8080</td>\\n      <td>1986</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>26816.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>5</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>3</td>\\n      <td>4</td>\\n      <td>3</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>252 rows × 20 columns</p>\n\nThe syntax that seems more complicated and does it in one step without the extra `Series` is this:\n\n```python\ndf[(df[\"Education\"] == \"Master\") & (df[\"Marital_Status\"] == \"Single\")]\n```\n\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>26</th>\\n      <td>10738</td>\\n      <td>1951</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>49389.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>40</td>\\n      <td>0</td>\\n      <td>19</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>3</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>46</th>\\n      <td>6853</td>\\n      <td>1982</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>75777.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>712</td>\\n      <td>26</td>\\n      <td>538</td>\\n      <td>69</td>\\n      <td>13</td>\\n      <td>80</td>\\n      <td>3</td>\\n      <td>6</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>76</th>\\n      <td>11178</td>\\n      <td>1972</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>42394.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>15</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>98</th>\\n      <td>6205</td>\\n      <td>1967</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>32557.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>34</td>\\n      <td>3</td>\\n      <td>29</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>10</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>110</th>\\n      <td>821</td>\\n      <td>1992</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>92859.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>962</td>\\n      <td>61</td>\\n      <td>921</td>\\n      <td>52</td>\\n      <td>61</td>\\n      <td>20</td>\\n      <td>5</td>\\n      <td>4</td>\\n      <td>12</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>1690</th>\\n      <td>3520</td>\\n      <td>1990</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>91172.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>162</td>\\n      <td>28</td>\\n      <td>818</td>\\n      <td>0</td>\\n      <td>28</td>\\n      <td>56</td>\\n      <td>4</td>\\n      <td>3</td>\\n      <td>7</td>\\n      <td>3</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1709</th>\\n      <td>4418</td>\\n      <td>1983</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>89616.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>671</td>\\n      <td>47</td>\\n      <td>655</td>\\n      <td>145</td>\\n      <td>111</td>\\n      <td>15</td>\\n      <td>7</td>\\n      <td>5</td>\\n      <td>12</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1714</th>\\n      <td>2980</td>\\n      <td>1952</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>8820.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>12</td>\\n      <td>0</td>\\n      <td>13</td>\\n      <td>4</td>\\n      <td>2</td>\\n      <td>4</td>\\n      <td>3</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1738</th>\\n      <td>7366</td>\\n      <td>1982</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>75777.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>712</td>\\n      <td>26</td>\\n      <td>538</td>\\n      <td>69</td>\\n      <td>13</td>\\n      <td>80</td>\\n      <td>3</td>\\n      <td>6</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1747</th>\\n      <td>9817</td>\\n      <td>1970</td>\\n      <td>Master</td>\\n      <td>Single</td>\\n      <td>44802.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>853</td>\\n      <td>10</td>\\n      <td>143</td>\\n      <td>13</td>\\n      <td>10</td>\\n      <td>20</td>\\n      <td>9</td>\\n      <td>4</td>\\n      <td>12</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>75 rows × 20 columns</p>\n\n\n## Describing a DataFrame\n\nPandas can easily create overview statistics for all numeric columns:\n\n```python\ndf.describe()\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>count</th>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1735.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.000000</td>\\n      <td>1754.0</td>\\n      <td>1754.0</td>\\n    </tr>\\n    <tr>\\n      <th>mean</th>\\n      <td>5584.696123</td>\\n      <td>1969.571266</td>\\n      <td>51166.578098</td>\\n      <td>0.456100</td>\\n      <td>0.480616</td>\\n      <td>276.072406</td>\\n      <td>28.034778</td>\\n      <td>166.492018</td>\\n      <td>40.517104</td>\\n      <td>28.958381</td>\\n      <td>47.266819</td>\\n      <td>3.990878</td>\\n      <td>2.576967</td>\\n      <td>5.714937</td>\\n      <td>5.332383</td>\\n      <td>0.011403</td>\\n      <td>3.0</td>\\n      <td>11.0</td>\\n    </tr>\\n    <tr>\\n      <th>std</th>\\n      <td>3254.655979</td>\\n      <td>11.876614</td>\\n      <td>26200.419179</td>\\n      <td>0.537854</td>\\n      <td>0.536112</td>\\n      <td>314.604735</td>\\n      <td>41.348883</td>\\n      <td>225.561694</td>\\n      <td>57.412986</td>\\n      <td>42.830660</td>\\n      <td>53.885647</td>\\n      <td>2.708278</td>\\n      <td>2.848335</td>\\n      <td>3.231465</td>\\n      <td>2.380183</td>\\n      <td>0.106202</td>\\n      <td>0.0</td>\\n      <td>0.0</td>\\n    </tr>\\n    <tr>\\n      <th>min</th>\\n      <td>0.000000</td>\\n      <td>1893.000000</td>\\n      <td>1730.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>3.0</td>\\n      <td>11.0</td>\\n    </tr>\\n    <tr>\\n      <th>25%</th>\\n      <td>2802.500000</td>\\n      <td>1960.000000</td>\\n      <td>33574.500000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>19.000000</td>\\n      <td>2.000000</td>\\n      <td>15.000000</td>\\n      <td>3.000000</td>\\n      <td>2.000000</td>\\n      <td>10.000000</td>\\n      <td>2.000000</td>\\n      <td>0.000000</td>\\n      <td>3.000000</td>\\n      <td>3.000000</td>\\n      <td>0.000000</td>\\n      <td>3.0</td>\\n      <td>11.0</td>\\n    </tr>\\n    <tr>\\n      <th>50%</th>\\n      <td>5468.000000</td>\\n      <td>1971.000000</td>\\n      <td>49912.000000</td>\\n      <td>0.000000</td>\\n      <td>0.000000</td>\\n      <td>160.500000</td>\\n      <td>9.000000</td>\\n      <td>66.000000</td>\\n      <td>13.000000</td>\\n      <td>9.000000</td>\\n      <td>27.000000</td>\\n      <td>3.000000</td>\\n      <td>1.000000</td>\\n      <td>5.000000</td>\\n      <td>6.000000</td>\\n      <td>0.000000</td>\\n      <td>3.0</td>\\n      <td>11.0</td>\\n    </tr>\\n    <tr>\\n      <th>75%</th>\\n      <td>8441.250000</td>\\n      <td>1978.000000</td>\\n      <td>68130.000000</td>\\n      <td>1.000000</td>\\n      <td>1.000000</td>\\n      <td>454.000000</td>\\n      <td>35.000000</td>\\n      <td>232.000000</td>\\n      <td>53.500000</td>\\n      <td>35.000000</td>\\n      <td>63.000000</td>\\n      <td>6.000000</td>\\n      <td>4.000000</td>\\n      <td>8.000000</td>\\n      <td>7.000000</td>\\n      <td>0.000000</td>\\n      <td>3.0</td>\\n      <td>11.0</td>\\n    </tr>\\n    <tr>\\n      <th>max</th>\\n      <td>11191.000000</td>\\n      <td>1996.000000</td>\\n      <td>666666.000000</td>\\n      <td>2.000000</td>\\n      <td>2.000000</td>\\n      <td>1492.000000</td>\\n      <td>199.000000</td>\\n      <td>1725.000000</td>\\n      <td>259.000000</td>\\n      <td>263.000000</td>\\n      <td>362.000000</td>\\n      <td>27.000000</td>\\n      <td>28.000000</td>\\n      <td>13.000000</td>\\n      <td>20.000000</td>\\n      <td>1.000000</td>\\n      <td>3.0</td>\\n      <td>11.0</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>8 rows × 18 columns</p>\n\nYou can also directly calculate the relevant statistics on columns you are interested in:\n\n```python\ndf[\"MntWines\"].max()\n```\n```\n1492\n```\n```python\ndf[[\"Kidhome\", \"Teenhome\"]].mean()\n```\n```\nKidhome     0.456100\nTeenhome    0.480616\ndtype: float64\n```\n\nFor non-numeric columns, you can get the represented values or their counts:\n\n```python\ndf[\"Education\"].unique()\n```\n```\narray(['Graduation', 'Master', 'Basic', '2n Cycle'], dtype=object)\n```\n\n```python\ndf[\"Marital_Status\"].value_counts()\n```\n```\nMarital_Status\nMarried     672\nTogether    463\nSingle      382\nDivorced    180\nWidow        53\nAlone         2\nAbsurd        2\nName: count, dtype: int64\n```\n\n**Task**\n\nSubset the `DataFrame` in two different ways:\n\n::: {.callout-tip}\nJust like with the \"PhD\" string before, you can subset using integers and $<$, $>$, $<=$ and $>=$.\n:::\n\n\n- One where everybody is born before 1970\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python \n  df_before = df[df[\"Year_Birth\"] < 1970]\n  ```\n</details>\n- One where everybody is born in or after 1970\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python \n  df_before = df[df[\"Year_Birth\"] >= 1970]\n  ```\n</details>\n\n- How many people are in the two `DataFrames`? \n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python \n  print(\"n(before)   =\", df_before.shape[0])\n  print(\"n(after)   =\", df_before.shape[0])\n  ```\n  ```\n  n(before)   = 804\n  n(after)   = 950\n  ```\n</details>\n\n- Do the total number of people sum up to the original `DataFrame` total?\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python\n   df_before.shape[0] + df_after.shape[0] == df.shape[0]\n  ```\n  True\n\n  ```python \n  print(\"n(sum)      =\", df_before.shape[0] + df_after.shape[0])\n  print(\"n(expected) =\", df.shape[0])\n  ```\n  ```\n  n(sum)      = 1754\n  n(expected) = 1754\n  ```\n\n</details>\n- How does the mean income of the two groups differ?\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python \n  print(\"income(before) =\", df_before[\"Income\"].mean())\n  print(\"income(after)  =\", df_after[\"Income\"].mean())\n  ```\n income(before) = 55513.38113207547\n  income(after)  = 47490.29255319149  \n</details>\n\n**Extra task**\n- Can you find something else that differs a lot between the two groups?\n\n## Dealing with missing data\n\nWe can check for missing data for each cell like this:\n\n```python\ndf.isna()\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>1749</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1750</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1751</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1752</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n    <tr>\\n      <th>1753</th>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n      <td>False</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>1754 rows × 20 columns</p>\n\nBy summing over each row, we see how many missing values are in each column.\n\n`True` is treated as `1` and `False` as `0`.\n\n```python\ndf.isna().sum()\n```\n```\nID                      0\nYear_Birth              0\nEducation               0\nMarital_Status          0\nIncome                 19\nKidhome                 0\nTeenhome                0\nMntWines                0\nMntFruits               0\nMntMeatProducts         0\nMntFishProducts         0\nMntSweetProducts        0\nMntGoldProds            0\nNumWebPurchases         0\nNumCatalogPurchases     0\nNumStorePurchases       0\nNumWebVisitsMonth       0\nComplain                0\ndtype: int64\n```\n\nWe don't really know what a missing value means so we are just going to keep them in the data.\n\nHowever, we could remove them using `df.dropna()`\n\n### Grouping data\n\nWe can group a `DataFrame` using a categorical column (for example `Education` or `Marital_Status`).\n\nThis allows us to do perform operations on each group individually.\n\nFor example, we could group by `Education` and calculate the mean `Income`:\n\n```python\ndf.groupby(by=\"Education\")[\"Income\"].mean()\n```\n```\nEducation\n2n Cycle      47633.190000\nBasic         20306.259259\nGraduation    52720.373656\nMaster        52917.534247\nName: Income, dtype: float6\n```\n\n##  Combining data\n\n### Concatenation\n\nOne way to combine multiple datasets is through **concatenation**, which either combines all columns or rows of multiple `DataFrames`.\n\nThe command to combine two `DataFrames` by appending all rows is `pd.concat([first_dataframe, second_dataframe])`\n\n**Task**\n\n- Read the **tsv** \"phd_data.tsv\" as a new `DataFrame` and name the variable `df2`\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python \n  df2 = pd.read_csv(\"phd_data.tsv\", sep=\"\\t\")\n  ```\n</details>\n\n- Concatenate the \"old\" `DataFrame` `df` and the new `df2` and name the concatenated one `concat_df`\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python \n  concat_df = pd.concat([df, df2])\n  concat_df\n  ```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Z_CostContact</th>\\n      <th>Z_Revenue</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>5524</td>\\n      <td>1957</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>58138.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>635</td>\\n      <td>88</td>\\n      <td>546</td>\\n      <td>172</td>\\n      <td>88</td>\\n      <td>88</td>\\n      <td>8</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>4141</td>\\n      <td>1965</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>71613.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>426</td>\\n      <td>49</td>\\n      <td>127</td>\\n      <td>111</td>\\n      <td>21</td>\\n      <td>42</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>6182</td>\\n      <td>1984</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>26646.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>11</td>\\n      <td>4</td>\\n      <td>20</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>7446</td>\\n      <td>1967</td>\\n      <td>Master</td>\\n      <td>Together</td>\\n      <td>62513.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>520</td>\\n      <td>42</td>\\n      <td>98</td>\\n      <td>0</td>\\n      <td>42</td>\\n      <td>14</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>10</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>481</th>\\n      <td>11133</td>\\n      <td>1973</td>\\n      <td>PhD</td>\\n      <td>YOLO</td>\\n      <td>48432.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>322</td>\\n      <td>3</td>\\n      <td>50</td>\\n      <td>4</td>\\n      <td>3</td>\\n      <td>42</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>482</th>\\n      <td>9589</td>\\n      <td>1948</td>\\n      <td>PhD</td>\\n      <td>Widow</td>\\n      <td>82032.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>332</td>\\n      <td>194</td>\\n      <td>377</td>\\n      <td>149</td>\\n      <td>125</td>\\n      <td>57</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>483</th>\\n      <td>4286</td>\\n      <td>1970</td>\\n      <td>PhD</td>\\n      <td>Single</td>\\n      <td>57642.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>580</td>\\n      <td>6</td>\\n      <td>58</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>27</td>\\n      <td>7</td>\\n      <td>6</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>484</th>\\n      <td>4001</td>\\n      <td>1946</td>\\n      <td>PhD</td>\\n      <td>Together</td>\\n      <td>64014.0</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>406</td>\\n      <td>0</td>\\n      <td>30</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>8</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n    <tr>\\n      <th>485</th>\\n      <td>9405</td>\\n      <td>1954</td>\\n      <td>PhD</td>\\n      <td>Married</td>\\n      <td>52869.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>84</td>\\n      <td>3</td>\\n      <td>61</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>21</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n      <td>11</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>2240 rows × 20 columns</p>\n\n</details>\n\n- Is there anything weird about the new `DataFrame` and can you fix that?\n<details>\n  <summary markdown=\"span\">Solution</summary>\n  We previously removed the columns \"Z_CostContact\" and \"Z_Revenue\" but they are in the new data again.\n\n  We can remove them like before:\n\n  ```python \n  concat_df = concat_df.drop(\"Z_CostContact\", axis=1)\n  concat_df = concat_df.drop(\"Z_Revenue\", axis=1)\n  concat_df\n  ```\n  <table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>5524</td>\\n      <td>1957</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>58138.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>635</td>\\n      <td>88</td>\\n      <td>546</td>\\n      <td>172</td>\\n      <td>88</td>\\n      <td>88</td>\\n      <td>8</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>4141</td>\\n      <td>1965</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>71613.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>426</td>\\n      <td>49</td>\\n      <td>127</td>\\n      <td>111</td>\\n      <td>21</td>\\n      <td>42</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>6182</td>\\n      <td>1984</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>26646.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>11</td>\\n      <td>4</td>\\n      <td>20</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>4</th>\\n      <td>7446</td>\\n      <td>1967</td>\\n      <td>Master</td>\\n      <td>Together</td>\\n      <td>62513.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>520</td>\\n      <td>42</td>\\n      <td>98</td>\\n      <td>0</td>\\n      <td>42</td>\\n      <td>14</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>10</td>\\n      <td>6</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>481</th>\\n      <td>11133</td>\\n      <td>1973</td>\\n      <td>PhD</td>\\n      <td>YOLO</td>\\n      <td>48432.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>322</td>\\n      <td>3</td>\\n      <td>50</td>\\n      <td>4</td>\\n      <td>3</td>\\n      <td>42</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>8</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>482</th>\\n      <td>9589</td>\\n      <td>1948</td>\\n      <td>PhD</td>\\n      <td>Widow</td>\\n      <td>82032.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>332</td>\\n      <td>194</td>\\n      <td>377</td>\\n      <td>149</td>\\n      <td>125</td>\\n      <td>57</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>483</th>\\n      <td>4286</td>\\n      <td>1970</td>\\n      <td>PhD</td>\\n      <td>Single</td>\\n      <td>57642.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>580</td>\\n      <td>6</td>\\n      <td>58</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>27</td>\\n      <td>7</td>\\n      <td>6</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>484</th>\\n      <td>4001</td>\\n      <td>1946</td>\\n      <td>PhD</td>\\n      <td>Together</td>\\n      <td>64014.0</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>406</td>\\n      <td>0</td>\\n      <td>30</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>8</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>7</td>\\n      <td>0</td>\\n    </tr>\\n    <tr>\\n      <th>485</th>\\n      <td>9405</td>\\n      <td>1954</td>\\n      <td>PhD</td>\\n      <td>Married</td>\\n      <td>52869.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>84</td>\\n      <td>3</td>\\n      <td>61</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>21</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>2240 rows × 18 columns</p>\n</details>\n\n- Is there something interesting about the marital status of some people that have a PhD?\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n  ```python \n  concat_df[concat_df[\"Education\"]==\"PhD\"][\"Marital_Status\"].value_counts()\n  ```\n  ```\n  Marital_Status\n  Married     192\n  Together    117\n  Single       98\n  Divorced     52\n  Widow        24\n  YOLO          2\n  Alone         1\n  Name: count, dtype: int64\n  ```\n\n  There's two people that have \"YOLO\" as their Marital Status ...\n\n</details>\n\n### Merging\n\nAnalysing numbers can be easier than analysing categorial values, like \"PhD\" and \"Master\".\n\nTo make our like easier, we might want to have a new column when the Education level is replaced with a number that \"ranks\" the Education levels by how long it takes.\n\nThis information could be stored in a Python `Dictionary` (Also called Hash Map in other languages), which stores **key** and **value** pairs.\n\nWe could store the Education information like this:\n\n```python\neducation_dictionary = {\n    \"Basic\": 1,\n    \"2n Cycle\": 2,\n    \"Graduation\": 3,\n    \"Master\": 4,\n    \"PhD\": 5\n}\n```\nWe can now convert this `Dictionary` to a `DataFrame`:\n\n```python\neducation_df = pd.DataFrame.from_dict(education_dictionary, orient=\"index\")\neducation_df\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>0</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>Basic</th>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>2n Cycle</th>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>Graduation</th>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>Master</th>\\n      <td>4</td>\\n    </tr>\\n    <tr>\\n      <th>PhD</th>\\n      <td>5</td>\\n    </tr>\\n  </tbody>\\n</table>\n\nThe resulting `DataFrame` has the Education level as index and the column 0 has the level information.\n\nWe can rename the column to \"Level\".\n\n```python\neducation_df = education_df.rename(columns={0: \"Level\"})\neducation_df\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>Level</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>Basic</th>\\n      <td>1</td>\\n    </tr>\\n    <tr>\\n      <th>2n Cycle</th>\\n      <td>2</td>\\n    </tr>\\n    <tr>\\n      <th>Graduation</th>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>Master</th>\\n      <td>4</td>\\n    </tr>\\n    <tr>\\n      <th>PhD</th>\\n      <td>5</td>\\n    </tr>\\n  </tbody>\\n</table>\n\nWe can now **merge** this new `education_df` with our previous `concat_df`.\n\nThe left `DataFrame` is `concat_df` and we merge on \"Education\" because that's where the Eduction information is.\n\nThe right one is `education_df` and the information is in the index.\n\n```python\nmerged_df = pd.merge(left=concat_df, right=education_df, left_on=\"Education\", right_index=True)\nmerged_df\n```\n<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>ID</th>\\n      <th>Year_Birth</th>\\n      <th>Education</th>\\n      <th>Marital_Status</th>\\n      <th>Income</th>\\n      <th>Kidhome</th>\\n      <th>Teenhome</th>\\n      <th>MntWines</th>\\n      <th>MntFruits</th>\\n      <th>MntMeatProducts</th>\\n      <th>MntFishProducts</th>\\n      <th>MntSweetProducts</th>\\n      <th>MntGoldProds</th>\\n      <th>NumWebPurchases</th>\\n      <th>NumCatalogPurchases</th>\\n      <th>NumStorePurchases</th>\\n      <th>NumWebVisitsMonth</th>\\n      <th>Complain</th>\\n      <th>Level</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>5524</td>\\n      <td>1957</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>58138.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>635</td>\\n      <td>88</td>\\n      <td>546</td>\\n      <td>172</td>\\n      <td>88</td>\\n      <td>88</td>\\n      <td>8</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2174</td>\\n      <td>1954</td>\\n      <td>Graduation</td>\\n      <td>Single</td>\\n      <td>46344.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>11</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>0</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>2</th>\\n      <td>4141</td>\\n      <td>1965</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>71613.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>426</td>\\n      <td>49</td>\\n      <td>127</td>\\n      <td>111</td>\\n      <td>21</td>\\n      <td>42</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>10</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>3</th>\\n      <td>6182</td>\\n      <td>1984</td>\\n      <td>Graduation</td>\\n      <td>Together</td>\\n      <td>26646.0</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>11</td>\\n      <td>4</td>\\n      <td>20</td>\\n      <td>10</td>\\n      <td>3</td>\\n      <td>5</td>\\n      <td>2</td>\\n      <td>0</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>5</th>\\n      <td>965</td>\\n      <td>1971</td>\\n      <td>Graduation</td>\\n      <td>Divorced</td>\\n      <td>55635.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>235</td>\\n      <td>65</td>\\n      <td>164</td>\\n      <td>50</td>\\n      <td>49</td>\\n      <td>27</td>\\n      <td>7</td>\\n      <td>3</td>\\n      <td>7</td>\\n      <td>6</td>\\n      <td>0</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>...</th>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n      <td>...</td>\\n    </tr>\\n    <tr>\\n      <th>481</th>\\n      <td>11133</td>\\n      <td>1973</td>\\n      <td>PhD</td>\\n      <td>YOLO</td>\\n      <td>48432.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>322</td>\\n      <td>3</td>\\n      <td>50</td>\\n      <td>4</td>\\n      <td>3</td>\\n      <td>42</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>6</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>5</td>\\n    </tr>\\n    <tr>\\n      <th>482</th>\\n      <td>9589</td>\\n      <td>1948</td>\\n      <td>PhD</td>\\n      <td>Widow</td>\\n      <td>82032.0</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>332</td>\\n      <td>194</td>\\n      <td>377</td>\\n      <td>149</td>\\n      <td>125</td>\\n      <td>57</td>\\n      <td>4</td>\\n      <td>6</td>\\n      <td>7</td>\\n      <td>1</td>\\n      <td>0</td>\\n      <td>5</td>\\n    </tr>\\n    <tr>\\n      <th>483</th>\\n      <td>4286</td>\\n      <td>1970</td>\\n      <td>PhD</td>\\n      <td>Single</td>\\n      <td>57642.0</td>\\n      <td>0</td>\\n      <td>1</td>\\n      <td>580</td>\\n      <td>6</td>\\n      <td>58</td>\\n      <td>8</td>\\n      <td>0</td>\\n      <td>27</td>\\n      <td>7</td>\\n      <td>6</td>\\n      <td>6</td>\\n      <td>4</td>\\n      <td>0</td>\\n      <td>5</td>\\n    </tr>\\n    <tr>\\n      <th>484</th>\\n      <td>4001</td>\\n      <td>1946</td>\\n      <td>PhD</td>\\n      <td>Together</td>\\n      <td>64014.0</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>406</td>\\n      <td>0</td>\\n      <td>30</td>\\n      <td>0</td>\\n      <td>0</td>\\n      <td>8</td>\\n      <td>8</td>\\n      <td>2</td>\\n      <td>5</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>5</td>\\n    </tr>\\n    <tr>\\n      <th>485</th>\\n      <td>9405</td>\\n      <td>1954</td>\\n      <td>PhD</td>\\n      <td>Married</td>\\n      <td>52869.0</td>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>84</td>\\n      <td>3</td>\\n      <td>61</td>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>21</td>\\n      <td>3</td>\\n      <td>1</td>\\n      <td>4</td>\\n      <td>7</td>\\n      <td>0</td>\\n      <td>5</td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p>2240 rows × 19 columns</p>\n\n\n## Data visualization\n\nWe can easily create simple graphs using `DataFrame.plot()`.\n\nThis uses the package **matplotlib** in the background, which is a very powerful and popular plotting library but is not the most user friendly.\n\nUsing this **Pandas** method is very easy and can be a good way to do some initial exploratory plots and later refine them using either pure **matplobib** or another library.\n\n### Histogram\n\nWe can plot the data from a `DataFrame` like this:\n\n`kind` specifies the kind of plot (for example *hist* for histogram, *bar* for bar graph or *scatter* for scatter plot).\n\nWe usually specify the columns from which the `x` and `y` components should be taken, but for a histogram we only need to specify one.\n\n```python\nax = merged_df.plot(kind=\"hist\", y=\"Income\")\nax.set_xlabel(\"Income\")\nax.set_title(\"Histogram of income\")\n```\nText(0.5, 1.0, 'Histogram of income')\n\n![png](https://github.com/Kevinnota/teaching_stuff/blob/main/histogram.png?raw=true)\n\n**Task**\n\nThis doesn't look very good because the x-axis extends so much!\n\n- Looking at the data, can you figure out what might cause this?\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n When we look at the highest earners, we see that somebody put *666666* as their income.\n\n We can assume that this was put as a joke or is an outlier.\n\n In either way, we can redo the plot with that datapoint removed.\n</details>\n\n- Can you \"fix\" the plot?\n<details>\n  <summary markdown=\"span\">Solution</summary>\n\n```python\nax = merged_df[merged_df[\"Income\"] != 666666].plot(kind=\"hist\",y=\"Income\")\nax.set_xlabel(\"Income\")\nax.set_title(\"Fixed Histogram of income\")\n```\nText(0.5, 1.0, 'Fixed Histogram of income')\n\n![png](https://github.com/Kevinnota/teaching_stuff/blob/main/fixed_histogram.png?raw=true)\n\n</details>\n\n### Bar plot\n\nAnother visualization we could do is a bar plot.\n\nUsing the `groupby` and `mean` methods, we can calculate the mean Income like we've learned before.\n\n```python\ngrouped_by_education = merged_df.groupby(by=\"Education\")[\"Income\"].mean()\ngrouped_by_education\n\n```\n```\nEducation\n2n Cycle      47633.190000\nBasic         20306.259259\nGraduation    52720.373656\nMaster        52917.534247\nPhD           56145.313929\nName: Income, dtype: float64\n```\nNow, this data can be shown:\n\n```python\nax = grouped_by_education.plot(kind=\"bar\")\nax.set_ylabel(\"Mean income\")\nax.set_title(\"Mean income for each education level\")\n```\nText(0.5, 1.0, 'Mean income for each education level')\n\n![png](https://github.com/Kevinnota/teaching_stuff/blob/main/bar_plot.png?raw=true)\n\n### Scatter plot\n\nAnother kind of plot is the scatter plot, which needs two columns for the **x** and **y** axis.\n\n```python\nax = df.plot(kind=\"scatter\", x=\"MntWines\", y=\"MntFruits\")\nax.set_title(\"Wine purchases and Fruit purchases\")\n```\nText(0.5, 1.0, 'Wine purchases and Fruit purchases')\n\n![png](https://github.com/Kevinnota/teaching_stuff/blob/main/scatter_polt_01.png?raw=true)\n\nYou can also specify whether the axes should be on the log scale or not.\n\n```python\nax = df.plot(kind=\"scatter\", x=\"MntWines\", y=\"MntFruits\", logy=True, logx=True)\nax.set_title(\"Wine purchases and Fruit purchases, on log scale\")\n```\nText(0.5, 1.0, 'Wine purchases and Fruit purchases, on log scale')\n\n![png](https://github.com/Kevinnota/teaching_stuff/blob/main/scatter_polt_02.png?raw=true)\n\n\n## Plotnine\n\nPlotnine is the Python clone of ggplot2, which is very powerful and is great if you are already familiar with the ggplot2 syntax!\n\n```python\nfrom plotnine import *\n```\n```python\n(ggplot(merged_df, aes(\"Education\", \"MntWines\", fill=\"Education\"))\n + geom_boxplot(alpha=0.8))\n```\n![png](https://github.com/Kevinnota/teaching_stuff/blob/main/boxplot.png?raw=true)\n\n\n```python\n(ggplot(merged_df[(merged_df[\"Year_Birth\"]>1900) & (merged_df[\"Income\"]!=666666)],\n        aes(\"Year_Birth\", \"Income\", fill=\"Education\"))\n + geom_point(alpha=0.5, stroke=0)\n + facet_wrap(\"Marital_Status\"))\n```\n![png](https://github.com/Kevinnota/teaching_stuff/blob/main/facet_scatter.png?raw=true)\n\n\n**task**\n\nNow that you are familiar with python, pandas, and plotting. There are two data.tables from **AncientMetagenomeDir** which contains metadata from metagenomes. You should, by using the code in the tutorial be able to explore the datasets and make some fancy plots.\n\n```\nfile names:\nsample_table_url\nlibrary_table_url\n```\n\n## (Optional) clean-up\n\nLet's clean up your working directory by removing all the data and output from this chapter.\n\nWhen closing your `jupyter` notebook(s), say no to saving any additional files.\n\nThe command below will remove the `/<PATH>/<TO>/python-pandas` directory **as well as all of its contents**. \n\n:::{.callout-tip}\n## Pro Tip\nAlways be VERY careful when using `rm -r`. Check 3x that the path you are\nspecifying is exactly what you want to delete and nothing more before pressing\nENTER!\n:::\n\n```bash\nrm -r /<PATH>/<TO>/python-pandas\n```\n\nOnce deleted you can move elsewhere (e.g. `cd ~`).\n\nWe can also get out of the `conda` environment with\n\n```bash\nconda deactivate\n```\n\n",
    "supporting": [
      "python-pandas_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}